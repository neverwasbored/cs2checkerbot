from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hbold, hlink

from utils.steam_api import SteamApi
from utils.faceit_api import FaceitApi
from ..states.steam_info import steam_state

router = Router()


@router.message(F.text == 'Get CS info')
async def enter_cs_id(message: Message, state: FSMContext):
    await message.answer(text='–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç SteamID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å!')
    await state.set_state(steam_state.steam_id)


@router.message(StateFilter(steam_state.steam_id))
async def process_cs_info(message: Message, state: FSMContext):
    try:
        steam_id = message.text
        steam_api = SteamApi(steam_id=steam_id)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è SteamID
        if not await steam_api._validation():
            await message.answer(
                text="‚ùå –û—à–∏–±–∫–∞!\n"
                     "–ù–µ–≤–µ—Ä–Ω—ã–π SteamID –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —Å–∫—Ä—ã—Ç.\n"
                     f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ {steam_id} –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            await state.clear()
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Steam
        steam_profile = await steam_api.get_steam_profile()
        if not steam_profile:
            await message.answer(
                text="‚ùå –ü—Ä–æ—Ñ–∏–ª—å Steam –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
                     f"SteamID: {steam_id}\n"
                     "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            await state.clear()
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = [
            "üéÆ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞",
            f"Steam –ù–∏–∫: {hbold(steam_profile.get('personaname'))}",
            f"SteamID64: {hbold(steam_profile.get('steamid'))}",
            f"–ü—Ä–æ—Ñ–∏–ª—å: {hlink('—Å—Å—ã–ª–∫–∞', steam_profile.get('profileurl'))}",
            ""
        ]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä
        game_stats = await steam_api.get_cs_stats()
        if game_stats:
            play_time = next(
                (game['playtime_forever'] // 60
                 for game in game_stats.get('games', [])
                 if game.get('appid') == 730
                 ), 0)

            response.extend([
                f"üìä –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                f"–í—Å–µ–≥–æ –∏–≥—Ä: {hbold(game_stats.get('game_count'))}",
                f"–ß–∞—Å–æ–≤ –≤ CS2: {hbold(play_time)}",
                ""
            ])

        # Faceit –¥–∞–Ω–Ω—ã–µ
        faceit_api = FaceitApi(steam_id=steam_profile.get('steamid'))
        faceit_account = await faceit_api.get_player_by_steam_id()

        if faceit_account:
            games = faceit_account.get('games', {})
            response.extend([
                "üèÜ Faceit –ü—Ä–æ—Ñ–∏–ª—å",
                f"–ù–∏–∫: {hbold(faceit_account.get('nickname'))}",
                f"–°—Ç—Ä–∞–Ω–∞: {hbold(faceit_account.get('country'))}",
                f"CS2 ELO: {hbold(games.get('cs2', {}).get('faceit_elo', 'N/A'))}",
                f"CS:GO ELO: {hbold(games.get('csgo', {}).get('faceit_elo', 'N/A'))}",
                ""
            ])

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Faceit
            faceit_stats = await faceit_api.get_player_stats(
                player_id=faceit_account.get('player_id')
            )
            if faceit_stats:
                response.extend([
                    "üìà Faceit –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    f"–ú–∞—Ç—á–∏: {hbold(faceit_stats.get('Matches'))}",
                    f"Win Rate: {hbold(faceit_stats.get('Win Rate %'))}%",
                    f"K/D: {hbold(faceit_stats.get('Average K/D Ratio'))}",
                    f"HS%: {hbold(faceit_stats.get('Average Headshots %'))}%"
                ])

        await message.answer(
            text="\n".join(response),
            parse_mode="HTML",
            disable_web_page_preview=True
        )

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()
